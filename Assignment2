package JPanelNew;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;

public class assign2GUI extends JPanel implements ActionListener, MouseListener, MouseMotionListener{

    private JButton btnLoad;
    private JButton btnSave;
    private JButton btnPlot;
    private JButton btnLine;
    private JButton btnRectangle;
    private JButton btnEllipse;
    private JButton btnPolygon;
    private JButton btnUndo;

    private int x1,y1,x2,y2,buttonpressed;

     public assign2GUI(){

        JFrame frame = new JFrame("Paint");
        frame.setSize(1000,500);
        frame.setBackground(Color.WHITE);
        frame.getContentPane().add(this);


        btnLoad = new JButton("Load");
        btnLoad.addActionListener(this);
        btnSave = new JButton("Save");
        btnSave.addActionListener(this);
        btnPlot = new JButton("Plot");
        btnPlot.addActionListener(this);
        btnLine = new JButton("Line");
        btnLine.addActionListener(this);
        btnRectangle = new JButton("Rectangle");
        btnRectangle.addActionListener(this);
        btnEllipse = new JButton("Ellipse");
        btnEllipse.addActionListener(this);
        btnPolygon = new JButton("Polygon");
        btnPolygon.addActionListener(this);
        btnUndo = new JButton("Undo");
        btnUndo.addActionListener(this);

        this.add(btnLoad);
        this.add(btnSave);
        this.add(btnPlot);
        this.add(btnLine);
        this.add(btnRectangle);
        this.add(btnEllipse);
        this.add(btnPolygon);
        this.add(btnUndo);

        addMouseListener(this);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }


    public void check()
    {
        if (x1 > x2)
        {
            int z = 0;
            z = x1;
            x1 = x2;
            x2 = z;
        }
        if (y1 > y2)
        {
            int z = 0;
            z = y1;
            y1 = y2;
            y2 = z;
        }
    }

    BufferedImage grid;
    Graphics2D gc;

    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        if (grid == null)
        {
            int w = this.getWidth();                        // width
            int h = this.getHeight();                       // height
            grid = (BufferedImage) (this.createImage(w, h));
            gc = grid.createGraphics();
            gc.setColor(Color.BLACK);
        }

        g2.drawImage(grid, null, 0, 0);
        check();
    }

    public void draw(){
        Graphics2D g = (Graphics2D) getGraphics();
        int w = x2 - x1;
        if (w < 0)
            w = w * (-1);

        int h = y2 - y1;
        if (h < 0)
            h = h * (-1);

        if (buttonpressed == 1)
        {
            check();
            gc.drawLine(x1, y1, x1, y1);
            repaint();
        }

        else if (buttonpressed == 2){
            check();
            gc.drawLine(x1 ,y1, x2,y2);
            repaint();
        }

        else if (buttonpressed == 3){
            check();
            gc.drawRect(x1,y1,w,h);
            repaint();
        }

        else if (buttonpressed == 4){
            check();
            gc.drawOval(x1,y1,w,h);
            repaint();
        }

    }

    @Override
    public void actionPerformed(ActionEvent e) {
        super.removeMouseMotionListener(this);

        Object src = e.getActionCommand();

        if (src.equals("Plot")){
            buttonpressed = 1;
        }

        if (src.equals("Line")){
            buttonpressed = 2;
        }

        if (src.equals("Rectangle")){
            buttonpressed = 3;
        }

        if (src.equals("Ellipse")){
            buttonpressed = 4;
        }
    }

    public static void main (String[] args){
        new assign2GUI();
    }

    @Override
    public void mouseClicked(MouseEvent e) {

    }

    @Override
    public void mousePressed(MouseEvent e) {

        x1 = e.getX();
        y1 = e.getY();
    }

    @Override
    public void mouseReleased(MouseEvent e) {

        x2 = e.getX();
        y2 = e.getY();
        draw();
    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }

    @Override
    public void mouseDragged(MouseEvent e) {

    }

    @Override
    public void mouseMoved(MouseEvent e) {

    }
}
